/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
} from '@solana/web3.js';
import { COMPUTE_BUDGET_PROGRAM_ADDRESS } from '../programs';

export const REQUEST_HEAP_FRAME_DISCRIMINATOR = 1;

export function getRequestHeapFrameDiscriminatorBytes() {
  return getU8Encoder().encode(REQUEST_HEAP_FRAME_DISCRIMINATOR);
}

export type RequestHeapFrameInstruction<
  TProgram extends string = typeof COMPUTE_BUDGET_PROGRAM_ADDRESS,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<TRemainingAccounts>;

export type RequestHeapFrameInstructionData = {
  discriminator: number;
  /**
   * Requested transaction-wide program heap size in bytes.
   * Must be multiple of 1024. Applies to each program, including CPIs.
   */
  bytes: number;
};

export type RequestHeapFrameInstructionDataArgs = {
  /**
   * Requested transaction-wide program heap size in bytes.
   * Must be multiple of 1024. Applies to each program, including CPIs.
   */
  bytes: number;
};

export function getRequestHeapFrameInstructionDataEncoder(): Encoder<RequestHeapFrameInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['bytes', getU32Encoder()],
    ]),
    (value) => ({ ...value, discriminator: REQUEST_HEAP_FRAME_DISCRIMINATOR })
  );
}

export function getRequestHeapFrameInstructionDataDecoder(): Decoder<RequestHeapFrameInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['bytes', getU32Decoder()],
  ]);
}

export function getRequestHeapFrameInstructionDataCodec(): Codec<
  RequestHeapFrameInstructionDataArgs,
  RequestHeapFrameInstructionData
> {
  return combineCodec(
    getRequestHeapFrameInstructionDataEncoder(),
    getRequestHeapFrameInstructionDataDecoder()
  );
}

export type RequestHeapFrameInput = {
  bytes: RequestHeapFrameInstructionDataArgs['bytes'];
};

export function getRequestHeapFrameInstruction<
  TProgramAddress extends Address = typeof COMPUTE_BUDGET_PROGRAM_ADDRESS,
>(
  input: RequestHeapFrameInput,
  config?: { programAddress?: TProgramAddress }
): RequestHeapFrameInstruction<TProgramAddress> {
  // Program address.
  const programAddress =
    config?.programAddress ?? COMPUTE_BUDGET_PROGRAM_ADDRESS;

  // Original args.
  const args = { ...input };

  const instruction = {
    programAddress,
    data: getRequestHeapFrameInstructionDataEncoder().encode(
      args as RequestHeapFrameInstructionDataArgs
    ),
  } as RequestHeapFrameInstruction<TProgramAddress>;

  return instruction;
}

export type ParsedRequestHeapFrameInstruction<
  TProgram extends string = typeof COMPUTE_BUDGET_PROGRAM_ADDRESS,
> = {
  programAddress: Address<TProgram>;
  data: RequestHeapFrameInstructionData;
};

export function parseRequestHeapFrameInstruction<TProgram extends string>(
  instruction: IInstruction<TProgram> & IInstructionWithData<Uint8Array>
): ParsedRequestHeapFrameInstruction<TProgram> {
  return {
    programAddress: instruction.programAddress,
    data: getRequestHeapFrameInstructionDataDecoder().decode(instruction.data),
  };
}
