/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyUint8Array,
} from '@solana/kit';
import { COMPUTE_BUDGET_PROGRAM_ADDRESS } from '../programs';

export const SET_COMPUTE_UNIT_LIMIT_DISCRIMINATOR = 2;

export function getSetComputeUnitLimitDiscriminatorBytes() {
  return getU8Encoder().encode(SET_COMPUTE_UNIT_LIMIT_DISCRIMINATOR);
}

export type SetComputeUnitLimitInstruction<
  TProgram extends string = typeof COMPUTE_BUDGET_PROGRAM_ADDRESS,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<TRemainingAccounts>;

export type SetComputeUnitLimitInstructionData = {
  discriminator: number;
  /** Transaction-wide compute unit limit. */
  units: number;
};

export type SetComputeUnitLimitInstructionDataArgs = {
  /** Transaction-wide compute unit limit. */
  units: number;
};

export function getSetComputeUnitLimitInstructionDataEncoder(): FixedSizeEncoder<SetComputeUnitLimitInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['units', getU32Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: SET_COMPUTE_UNIT_LIMIT_DISCRIMINATOR,
    })
  );
}

export function getSetComputeUnitLimitInstructionDataDecoder(): FixedSizeDecoder<SetComputeUnitLimitInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['units', getU32Decoder()],
  ]);
}

export function getSetComputeUnitLimitInstructionDataCodec(): FixedSizeCodec<
  SetComputeUnitLimitInstructionDataArgs,
  SetComputeUnitLimitInstructionData
> {
  return combineCodec(
    getSetComputeUnitLimitInstructionDataEncoder(),
    getSetComputeUnitLimitInstructionDataDecoder()
  );
}

export type SetComputeUnitLimitInput = {
  units: SetComputeUnitLimitInstructionDataArgs['units'];
};

export function getSetComputeUnitLimitInstruction<
  TProgramAddress extends Address = typeof COMPUTE_BUDGET_PROGRAM_ADDRESS,
>(
  input: SetComputeUnitLimitInput,
  config?: { programAddress?: TProgramAddress }
): SetComputeUnitLimitInstruction<TProgramAddress> {
  // Program address.
  const programAddress =
    config?.programAddress ?? COMPUTE_BUDGET_PROGRAM_ADDRESS;

  // Original args.
  const args = { ...input };

  const instruction = {
    programAddress,
    data: getSetComputeUnitLimitInstructionDataEncoder().encode(
      args as SetComputeUnitLimitInstructionDataArgs
    ),
  } as SetComputeUnitLimitInstruction<TProgramAddress>;

  return instruction;
}

export type ParsedSetComputeUnitLimitInstruction<
  TProgram extends string = typeof COMPUTE_BUDGET_PROGRAM_ADDRESS,
> = {
  programAddress: Address<TProgram>;
  data: SetComputeUnitLimitInstructionData;
};

export function parseSetComputeUnitLimitInstruction<TProgram extends string>(
  instruction: Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array>
): ParsedSetComputeUnitLimitInstruction<TProgram> {
  return {
    programAddress: instruction.programAddress,
    data: getSetComputeUnitLimitInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
