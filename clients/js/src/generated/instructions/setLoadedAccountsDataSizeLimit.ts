/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
} from '@solana/web3.js';
import { COMPUTE_BUDGET_PROGRAM_ADDRESS } from '../programs';

export type SetLoadedAccountsDataSizeLimitInstruction<
  TProgram extends string = typeof COMPUTE_BUDGET_PROGRAM_ADDRESS,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<TRemainingAccounts>;

export type SetLoadedAccountsDataSizeLimitInstructionData = {
  discriminator: number;
  accountDataSizeLimit: number;
};

export type SetLoadedAccountsDataSizeLimitInstructionDataArgs = {
  accountDataSizeLimit: number;
};

export function getSetLoadedAccountsDataSizeLimitInstructionDataEncoder(): Encoder<SetLoadedAccountsDataSizeLimitInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['accountDataSizeLimit', getU32Encoder()],
    ]),
    (value) => ({ ...value, discriminator: 4 })
  );
}

export function getSetLoadedAccountsDataSizeLimitInstructionDataDecoder(): Decoder<SetLoadedAccountsDataSizeLimitInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['accountDataSizeLimit', getU32Decoder()],
  ]);
}

export function getSetLoadedAccountsDataSizeLimitInstructionDataCodec(): Codec<
  SetLoadedAccountsDataSizeLimitInstructionDataArgs,
  SetLoadedAccountsDataSizeLimitInstructionData
> {
  return combineCodec(
    getSetLoadedAccountsDataSizeLimitInstructionDataEncoder(),
    getSetLoadedAccountsDataSizeLimitInstructionDataDecoder()
  );
}

export type SetLoadedAccountsDataSizeLimitInput = {
  accountDataSizeLimit: SetLoadedAccountsDataSizeLimitInstructionDataArgs['accountDataSizeLimit'];
};

export function getSetLoadedAccountsDataSizeLimitInstruction(
  input: SetLoadedAccountsDataSizeLimitInput
): SetLoadedAccountsDataSizeLimitInstruction<
  typeof COMPUTE_BUDGET_PROGRAM_ADDRESS
> {
  // Program address.
  const programAddress = COMPUTE_BUDGET_PROGRAM_ADDRESS;

  // Original args.
  const args = { ...input };

  const instruction = {
    programAddress,
    data: getSetLoadedAccountsDataSizeLimitInstructionDataEncoder().encode(
      args as SetLoadedAccountsDataSizeLimitInstructionDataArgs
    ),
  } as SetLoadedAccountsDataSizeLimitInstruction<
    typeof COMPUTE_BUDGET_PROGRAM_ADDRESS
  >;

  return instruction;
}

export type ParsedSetLoadedAccountsDataSizeLimitInstruction<
  TProgram extends string = typeof COMPUTE_BUDGET_PROGRAM_ADDRESS,
> = {
  programAddress: Address<TProgram>;
  data: SetLoadedAccountsDataSizeLimitInstructionData;
};

export function parseSetLoadedAccountsDataSizeLimitInstruction<
  TProgram extends string,
>(
  instruction: IInstruction<TProgram> & IInstructionWithData<Uint8Array>
): ParsedSetLoadedAccountsDataSizeLimitInstruction<TProgram> {
  return {
    programAddress: instruction.programAddress,
    data: getSetLoadedAccountsDataSizeLimitInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
