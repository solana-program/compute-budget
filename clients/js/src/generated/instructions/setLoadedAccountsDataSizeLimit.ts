/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Address } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  mapEncoder,
} from '@solana/codecs';
import {
  IAccountMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
} from '@solana/instructions';

export type SetLoadedAccountsDataSizeLimitInstruction<
  TProgram extends string = 'ComputeBudget111111111111111111111111111111',
  TRemainingAccounts extends Array<IAccountMeta<string>> = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<TRemainingAccounts>;

export type SetLoadedAccountsDataSizeLimitInstructionWithSigners<
  TProgram extends string = 'ComputeBudget111111111111111111111111111111',
  TRemainingAccounts extends Array<IAccountMeta<string>> = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<TRemainingAccounts>;

export type SetLoadedAccountsDataSizeLimitInstructionData = {
  discriminator: number;
  accountDataSizeLimit: number;
};

export type SetLoadedAccountsDataSizeLimitInstructionDataArgs = {
  accountDataSizeLimit: number;
};

export function getSetLoadedAccountsDataSizeLimitInstructionDataEncoder(): Encoder<SetLoadedAccountsDataSizeLimitInstructionDataArgs> {
  return mapEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['accountDataSizeLimit', getU32Encoder()],
    ]),
    (value) => ({ ...value, discriminator: 4 })
  );
}

export function getSetLoadedAccountsDataSizeLimitInstructionDataDecoder(): Decoder<SetLoadedAccountsDataSizeLimitInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['accountDataSizeLimit', getU32Decoder()],
  ]);
}

export function getSetLoadedAccountsDataSizeLimitInstructionDataCodec(): Codec<
  SetLoadedAccountsDataSizeLimitInstructionDataArgs,
  SetLoadedAccountsDataSizeLimitInstructionData
> {
  return combineCodec(
    getSetLoadedAccountsDataSizeLimitInstructionDataEncoder(),
    getSetLoadedAccountsDataSizeLimitInstructionDataDecoder()
  );
}

export type SetLoadedAccountsDataSizeLimitInput = {
  accountDataSizeLimit: SetLoadedAccountsDataSizeLimitInstructionDataArgs['accountDataSizeLimit'];
};

export type SetLoadedAccountsDataSizeLimitInputWithSigners = {
  accountDataSizeLimit: SetLoadedAccountsDataSizeLimitInstructionDataArgs['accountDataSizeLimit'];
};

export function getSetLoadedAccountsDataSizeLimitInstruction<
  TProgram extends string = 'ComputeBudget111111111111111111111111111111',
>(
  input: SetLoadedAccountsDataSizeLimitInputWithSigners
): SetLoadedAccountsDataSizeLimitInstructionWithSigners<TProgram>;
export function getSetLoadedAccountsDataSizeLimitInstruction<
  TProgram extends string = 'ComputeBudget111111111111111111111111111111',
>(
  input: SetLoadedAccountsDataSizeLimitInput
): SetLoadedAccountsDataSizeLimitInstruction<TProgram>;
export function getSetLoadedAccountsDataSizeLimitInstruction(input: SetLoadedAccountsDataSizeLimitInput): IInstruction {
  // Program address.
  const programAddress =
    'ComputeBudget111111111111111111111111111111' as Address<'ComputeBudget111111111111111111111111111111'>;

  // Original args.
  const args = { ...input };

  const instruction = getSetLoadedAccountsDataSizeLimitInstructionRaw(
    args as SetLoadedAccountsDataSizeLimitInstructionDataArgs,
    programAddress
  );

  return instruction;
}

export function getSetLoadedAccountsDataSizeLimitInstructionRaw<
  TProgram extends string = 'ComputeBudget111111111111111111111111111111',
  TRemainingAccounts extends Array<IAccountMeta<string>> = [],
>(
  args: SetLoadedAccountsDataSizeLimitInstructionDataArgs,
  programAddress: Address<TProgram> = 'ComputeBudget111111111111111111111111111111' as Address<TProgram>,
  remainingAccounts?: TRemainingAccounts
) {
  return {
    accounts: remainingAccounts ?? [],
    data: getSetLoadedAccountsDataSizeLimitInstructionDataEncoder().encode(
      args
    ),
    programAddress,
  } as SetLoadedAccountsDataSizeLimitInstruction<TProgram, TRemainingAccounts>;
}

export type ParsedSetLoadedAccountsDataSizeLimitInstruction<
  TProgram extends string = 'ComputeBudget111111111111111111111111111111',
> = {
  programAddress: Address<TProgram>;
  data: SetLoadedAccountsDataSizeLimitInstructionData;
};

export function parseSetLoadedAccountsDataSizeLimitInstruction<
  TProgram extends string,
>(
  instruction: IInstruction<TProgram> & IInstructionWithData<Uint8Array>
): ParsedSetLoadedAccountsDataSizeLimitInstruction<TProgram> {
  return {
    programAddress: instruction.programAddress,
    data: getSetLoadedAccountsDataSizeLimitInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
