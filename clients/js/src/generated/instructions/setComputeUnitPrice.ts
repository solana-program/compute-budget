/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Address } from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  mapEncoder,
} from '@solana/codecs';
import {
  IAccountMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
} from '@solana/instructions';

export type SetComputeUnitPriceInstruction<
  TProgram extends string = 'ComputeBudget111111111111111111111111111111',
  TRemainingAccounts extends Array<IAccountMeta<string>> = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<TRemainingAccounts>;

export type SetComputeUnitPriceInstructionWithSigners<
  TProgram extends string = 'ComputeBudget111111111111111111111111111111',
  TRemainingAccounts extends Array<IAccountMeta<string>> = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<TRemainingAccounts>;

export type SetComputeUnitPriceInstructionData = {
  discriminator: number;
  /** Transaction compute unit price used for prioritization fees. */
  microLamports: bigint;
};

export type SetComputeUnitPriceInstructionDataArgs = {
  /** Transaction compute unit price used for prioritization fees. */
  microLamports: number | bigint;
};

export function getSetComputeUnitPriceInstructionDataEncoder(): Encoder<SetComputeUnitPriceInstructionDataArgs> {
  return mapEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['microLamports', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: 3 })
  );
}

export function getSetComputeUnitPriceInstructionDataDecoder(): Decoder<SetComputeUnitPriceInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['microLamports', getU64Decoder()],
  ]);
}

export function getSetComputeUnitPriceInstructionDataCodec(): Codec<
  SetComputeUnitPriceInstructionDataArgs,
  SetComputeUnitPriceInstructionData
> {
  return combineCodec(
    getSetComputeUnitPriceInstructionDataEncoder(),
    getSetComputeUnitPriceInstructionDataDecoder()
  );
}

export type SetComputeUnitPriceInput = {
  microLamports: SetComputeUnitPriceInstructionDataArgs['microLamports'];
};

export type SetComputeUnitPriceInputWithSigners = {
  microLamports: SetComputeUnitPriceInstructionDataArgs['microLamports'];
};

export function getSetComputeUnitPriceInstruction<
  TProgram extends string = 'ComputeBudget111111111111111111111111111111',
>(
  input: SetComputeUnitPriceInputWithSigners
): SetComputeUnitPriceInstructionWithSigners<TProgram>;
export function getSetComputeUnitPriceInstruction<
  TProgram extends string = 'ComputeBudget111111111111111111111111111111',
>(input: SetComputeUnitPriceInput): SetComputeUnitPriceInstruction<TProgram>;
export function getSetComputeUnitPriceInstruction(input: SetComputeUnitPriceInput): IInstruction {
  // Program address.
  const programAddress =
    'ComputeBudget111111111111111111111111111111' as Address<'ComputeBudget111111111111111111111111111111'>;

  // Original args.
  const args = { ...input };

  const instruction = getSetComputeUnitPriceInstructionRaw(
    args as SetComputeUnitPriceInstructionDataArgs,
    programAddress
  );

  return instruction;
}

export function getSetComputeUnitPriceInstructionRaw<
  TProgram extends string = 'ComputeBudget111111111111111111111111111111',
  TRemainingAccounts extends Array<IAccountMeta<string>> = [],
>(
  args: SetComputeUnitPriceInstructionDataArgs,
  programAddress: Address<TProgram> = 'ComputeBudget111111111111111111111111111111' as Address<TProgram>,
  remainingAccounts?: TRemainingAccounts
) {
  return {
    accounts: remainingAccounts ?? [],
    data: getSetComputeUnitPriceInstructionDataEncoder().encode(args),
    programAddress,
  } as SetComputeUnitPriceInstruction<TProgram, TRemainingAccounts>;
}

export type ParsedSetComputeUnitPriceInstruction<
  TProgram extends string = 'ComputeBudget111111111111111111111111111111',
> = {
  programAddress: Address<TProgram>;
  data: SetComputeUnitPriceInstructionData;
};

export function parseSetComputeUnitPriceInstruction<TProgram extends string>(
  instruction: IInstruction<TProgram> & IInstructionWithData<Uint8Array>
): ParsedSetComputeUnitPriceInstruction<TProgram> {
  return {
    programAddress: instruction.programAddress,
    data: getSetComputeUnitPriceInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
